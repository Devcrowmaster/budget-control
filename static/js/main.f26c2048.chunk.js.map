{"version":3,"sources":["components/Error.js","components/Question.js","components/Form.js","components/Expenditure.js","components/List.js","helpers.js","components/BudgetControl.js","App.js","serviceWorker.js","index.js"],"names":["Error","message","className","Question","saveBudget","saveRemaining","updateQuestion","useState","quantify","saveQuantify","error","saveError","onSubmit","e","preventDefault","isNaN","type","placeholder","onChange","parseInt","target","value","Form","saveExpenditure","saveCreateExpenditure","name","saveName","trim","expenditure","id","shortid","generate","htmlFor","Expenditure","List","expenditures","map","key","reviewBudget","budget","remaining","BudgetControl","App","showQuestion","saveExpenditures","createExpenditure","useEffect","budgetRemaining","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"iMAYeA,EATD,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACd,OACE,uBAAGC,UAAU,4BAA4BD,ICkE9BE,EAnEE,SAAC,GAA+C,IAA9CC,EAA6C,EAA7CA,WAAWC,EAAkC,EAAlCA,cAAcC,EAAoB,EAApBA,eAAoB,EAG9BC,mBAAS,GAHqB,mBAGvDC,EAHuD,KAG9CC,EAH8C,OAKnCF,oBAAS,GAL0B,mBAKvDG,EALuD,KAKhDC,EALgD,KAqC9D,OACE,kBAAC,WAAD,KACE,qDACCD,EAAS,kBAAC,EAAD,CAAOT,QAAQ,kCAA2C,KAEpE,0BACEW,SA3BY,SAAAC,GAChBA,EAAEC,iBAGCN,EAAW,GAAKO,MAAMP,GACvBG,GAAU,IAMZA,GAAU,GAEVP,EAAWI,GACXH,EAAcG,GACdF,GAAe,MAcX,2BACAU,KAAK,SACLd,UAAU,eACVe,YAAY,wBACZC,SAzCe,SAAAL,GAInBJ,EAAaU,SAASN,EAAEO,OAAOC,MAAM,QAuCnC,2BACEL,KAAK,SACLd,UAAU,8BACVmB,MAAM,2B,gBC0BCC,EA/EF,SAAC,GAA6C,IAA5CC,EAA2C,EAA3CA,gBAAgBC,EAA2B,EAA3BA,sBAA2B,EAEhCjB,mBAAS,IAFuB,mBAEjDkB,EAFiD,KAE5CC,EAF4C,OAIxBnB,mBAAS,GAJe,mBAIjDC,EAJiD,KAIxCC,EAJwC,OAM9BF,oBAAS,GANqB,mBAMjDG,EANiD,KAM3CC,EAN2C,KAqCxD,OACE,0BACEC,SA9BmB,SAAAC,GAIrB,GAHAA,EAAEC,iBAGCN,EAAW,GAAKO,MAAMP,IAA6B,KAAhBiB,EAAKE,OACzChB,GAAU,OADZ,CAIAA,GAAU,GAGV,IAAMiB,EAAa,CACjBH,OACAjB,WACAqB,GAAIC,IAAQC,YAMdR,EAAgBK,GAChBJ,GAAsB,GAGtBE,EAAS,IACTjB,EAAa,MAOX,uDACEC,EAAS,kBAAC,EAAD,CAAOT,QAAQ,2DAA8D,KACxF,yBAAKC,UAAU,SACb,2BAAO8B,QAAQ,QAAf,gBACA,2BACEH,GAAG,OACHb,KAAK,OACLd,UAAU,eACVe,YAAY,iBACZI,MAAOI,EACPP,SAAU,SAAAL,GAAC,OAAIa,EAASb,EAAEO,OAAOC,WAGrC,yBAAKnB,UAAU,SACb,2BAAO8B,QAAQ,YAAf,kBACA,2BACEH,GAAG,WACHb,KAAK,SACLd,UAAU,eACVe,YAAY,UACZI,MAAOb,EACPU,SAAU,SAAAL,GAAC,OAAIJ,EAAaU,SAASN,EAAEO,OAAOC,MAAM,SAGxD,2BACEL,KAAK,SACLd,UAAU,8BACVmB,MAAM,oBC3DCY,EAXK,SAAC,GAAD,IAAEL,EAAF,EAAEA,YAAF,OAClB,wBAAI1B,UAAU,UACZ,2BAAI0B,EAAYH,KAChB,0BAAMvB,UAAU,SAAhB,KAA2B0B,EAAYpB,aCkB5B0B,EAnBF,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACb,OACE,yBAAKjC,UAAU,qBACb,uCACCiC,EAAaC,KAAI,SAAAR,GAAW,OAC3B,kBAAC,EAAD,CACES,IAAKT,EAAYC,GACjBD,YAAaA,SCZVU,EAAe,SAACC,EAAOC,GAYlC,OATID,EAAS,EAAKC,EACN,qBAGFD,EAAS,EAAKC,EACZ,sBAEA,uBCWCC,EAjBO,SAAC,GAAwB,IAAvBF,EAAsB,EAAtBA,OAAOC,EAAe,EAAfA,UAC7B,OACE,kBAAC,WAAD,KACE,yBAAKtC,UAAU,uBAAf,kBACkBqC,GAElB,yBAAKrC,UAAWoC,EAAaC,EAAOC,IAApC,eACeA,KCwENE,MA7Ef,WAAe,MAEgBnC,mBAAS,GAFzB,mBAELgC,EAFK,KAEEnC,EAFF,OAIqBG,mBAAS,GAJ9B,mBAINiC,EAJM,KAIInC,EAJJ,OAM0BE,oBAAS,GANnC,mBAMNoC,EANM,KAMQrC,EANR,OAQ2BC,mBAAS,IARpC,mBAQN4B,EARM,KAQOS,EARP,OAU2BrC,mBAAS,IAVpC,mBAUNqB,EAVM,KAUQL,EAVR,OAYqChB,oBAAS,GAZ9C,mBAYNsC,EAZM,KAYYrB,EAZZ,KAoCb,OApBAsB,qBAAU,WACR,GAAGD,EAAkB,CAGnBD,EAAiB,GAAD,mBACXT,GADW,CAEdP,KAIF,IAAMmB,EAAkBP,EAAYZ,EAAYpB,SAChDH,EAAc0C,GAGdvB,GAAsB,MAIvB,CAACI,EAAYiB,EAAkBV,EAAaK,IAG7C,yBAAKtC,UAAU,OACb,yBAAKA,UAAU,aACb,gCACE,6CACA,yBAAKA,UAAU,uBACZyC,EACC,kBAAC,EAAD,CACAvC,WAAYA,EACZC,cAAeA,EACfC,eAAgBA,IAGhB,yBAAKJ,UAAU,OACb,yBAAKA,UAAU,mBACb,kBAAC,EAAD,CACEqB,gBAAiBA,EACjBC,sBAAuBA,KAG3B,yBAAKtB,UAAU,mBACb,kBAAC,EAAD,CACEiC,aAAcA,IAEhB,kBAAC,EAAD,CACEI,OAAQA,EACRC,UAAWA,WCxDXQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArD,GACLsD,QAAQtD,MAAMA,EAAMT,a","file":"static/js/main.f26c2048.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Error = ({message}) => {\r\n  return ( \r\n    <p className=\"alert alert-danger error\">{message}</p>\r\n   );\r\n}\r\nError.propTypes = {\r\n  message : PropTypes.string.isRequired\r\n}\r\n\r\nexport default Error;","import React,{Fragment,useState} from 'react';\r\nimport Error from './Error';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Question = ({saveBudget,saveRemaining,updateQuestion}) => {\r\n\r\n  //Definir el State\r\n  const [quantify,saveQuantify] = useState(0);\r\n\r\n  const [error, saveError] = useState(false);\r\n\r\n  //Function que lee el presupuesto\r\n  const defineBudget = e => {\r\n    // console.log(e.target.value); //Return String\r\n    // console.log(parseInt(e.target.value)); //Convierte a numero\r\n\r\n    saveQuantify(parseInt(e.target.value,10));\r\n  }\r\n\r\n  //Submit\r\n  const addBudget = e =>{\r\n    e.preventDefault();\r\n\r\n    //Validar\r\n    if(quantify < 1 || isNaN(quantify)){\r\n      saveError(true);\r\n      return;\r\n    }\r\n\r\n\r\n    //Si pasa la validacion\r\n    saveError(false);\r\n\r\n    saveBudget(quantify);\r\n    saveRemaining(quantify);\r\n    updateQuestion(false);\r\n\r\n\r\n  }\r\n\r\n\r\n  return ( \r\n    <Fragment>\r\n      <h2>Coloca tu presupuesto</h2>\r\n      {error ?  <Error message=\"El  presupuesto es incorrecto\"></Error> : null}\r\n\r\n      <form\r\n        onSubmit={addBudget}\r\n      >\r\n        <input \r\n        type=\"number\" \r\n        className=\"u-full-width\"\r\n        placeholder=\"Coloca tu presupuesto\"\r\n        onChange={defineBudget}\r\n        />\r\n      <input \r\n        type=\"submit\"\r\n        className=\"button-primary u-full-width\"\r\n        value=\"Definir Presupuesto\"\r\n      />\r\n      </form>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nQuestion.propTypes = {\r\n  saveBudget: PropTypes.func.isRequired,\r\n  saveRemaining: PropTypes.func.isRequired,\r\n  updateQuestion: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Question;","import React, { useState } from 'react'\r\nimport Error from './Error';\r\nimport shortid from 'shortid';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Form = ({saveExpenditure,saveCreateExpenditure}) => {\r\n\r\n  const [name,saveName] = useState('');\r\n\r\n  const [quantify,saveQuantify] = useState(0);\r\n\r\n  const [error,saveError] = useState(false);\r\n\r\n  //Cuando se Agrega un Gasto\r\n  const addExpenditure = e =>{\r\n    e.preventDefault();\r\n\r\n    //validar\r\n    if(quantify < 1 || isNaN(quantify) || name.trim() === ''){\r\n      saveError(true);\r\n      return;\r\n    }\r\n    saveError(false);\r\n\r\n    //construir el gasto\r\n    const expenditure ={\r\n      name,\r\n      quantify,\r\n      id: shortid.generate()\r\n    }\r\n    // console.log(expenditure);\r\n\r\n    //pasar el gasto al componente principal\r\n\r\n    saveExpenditure(expenditure);\r\n    saveCreateExpenditure(true);\r\n\r\n    //resetear el form\r\n    saveName('');\r\n    saveQuantify(0);\r\n  }\r\n\r\n  return ( \r\n    <form\r\n      onSubmit={addExpenditure}\r\n    >\r\n      <h2>Agregar tus gastos aqui</h2>\r\n      { error ?  <Error message=\"Ambos campos son obligatorios o Presupuesto Incorrecto\" /> : null }\r\n      <div className=\"campo\">\r\n        <label htmlFor=\"name\">Nombre Gasto</label>\r\n        <input\r\n          id=\"name\"\r\n          type=\"text\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Ej. Transporte\"\r\n          value={name}\r\n          onChange={e => saveName(e.target.value)}\r\n        />\r\n      </div>\r\n      <div className=\"campo\">\r\n        <label htmlFor=\"quantify\">Cantidad Gasto</label>\r\n        <input\r\n          id=\"quantify\"\r\n          type=\"number\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Ej. 300\"\r\n          value={quantify}\r\n          onChange={e => saveQuantify(parseInt(e.target.value,10))}\r\n        />\r\n      </div>\r\n      <input \r\n        type=\"submit\"\r\n        className=\"button-primary u-full-width\"\r\n        value=\"Agregar Gasto\"\r\n      />\r\n    </form>\r\n   );\r\n}\r\n\r\nForm.propTypes = {\r\n  saveExpenditure : PropTypes.func.isRequired ,\r\n  saveCreateExpenditure : PropTypes.func.isRequired\r\n\r\n}\r\nexport default Form;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Expenditure = ({expenditure}) => ( \r\n  <li className=\"gastos\">\r\n    <p>{expenditure.name}\r\n    <span className=\"gasto\">$ {expenditure.quantify}</span>\r\n    </p>\r\n  </li>\r\n);\r\n\r\nExpenditure.propTypes = {\r\n  expenditure : PropTypes.object.isRequired\r\n}\r\nexport default Expenditure;","import React from 'react'\r\nimport Expenditure from './Expenditure';\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nconst List = ({expenditures}) => {\r\n  return ( \r\n    <div className=\"gastos-realizados\">\r\n      <h2>Listado</h2>\r\n      {expenditures.map(expenditure =>(\r\n        <Expenditure\r\n          key={expenditure.id}\r\n          expenditure={expenditure}\r\n        />\r\n      ))}\r\n\r\n    </div>\r\n   );\r\n}\r\n\r\nList.propTypes ={\r\n  expenditures : PropTypes.array.isRequired\r\n}\r\n\r\nexport default List;","export const reviewBudget = (budget,remaining) =>{\r\n  let classes;\r\n\r\n  if((budget / 4) > remaining ){\r\n    classes = 'alert alert-danger';\r\n\r\n\r\n  }else if((budget / 2) > remaining){\r\n    classes = 'alert alert-warning';\r\n  }else{\r\n    classes = 'alert alert-success'\r\n  }\r\n  return classes;\r\n}","import React,{Fragment} from 'react';\r\nimport { reviewBudget } from '../helpers';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst BudgetControl = ({budget,remaining}) => {\r\n  return ( \r\n    <Fragment>\r\n      <div className=\"alert alert-primary\">\r\n        Presupuesto: $ {budget}\r\n      </div>\r\n      <div className={reviewBudget(budget,remaining)}>\r\n        Restante: $ {remaining}\r\n      </div>\r\n    </Fragment>\r\n   );\r\n}\r\n\r\nBudgetControl.propTypes = {\r\n  budget : PropTypes.number.isRequired,\r\n  remaining : PropTypes.number.isRequired\r\n}\r\nexport default BudgetControl;","import React,{useState,useEffect} from 'react';\nimport Question from './components/Question';\nimport Form from './components/Form';\nimport List from './components/List';\nimport BudgetControl from './components/BudgetControl';\n\nfunction App() {\n  //Definir state\n  const [ budget,saveBudget] = useState(0);\n\n  const [remaining,saveRemaining] = useState(0);\n\n  const [showQuestion, updateQuestion] = useState(true);\n\n  const [expenditures,saveExpenditures] = useState([]);\n\n  const [expenditure , saveExpenditure] = useState({});\n\n  const [createExpenditure,saveCreateExpenditure] = useState(false);\n\n\n  //UseEffect que actualiza el restante\n  useEffect(()=>{\n    if(createExpenditure){\n\n      //Agrega el nuevo presupuesto\n      saveExpenditures([\n        ...expenditures,\n        expenditure\n      ])\n      //Resta del presupuesto actual\n  \n      const budgetRemaining = remaining - expenditure.quantify;\n      saveRemaining(budgetRemaining);\n  \n      //Resetear a false\n      saveCreateExpenditure(false);\n    }\n\n\n  }, [expenditure,createExpenditure,expenditures,remaining]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <header>\n          <h1>Gasto Semanal</h1>\n          <div className=\"contenido-principal\">\n            {showQuestion ? (\n              <Question\n              saveBudget={saveBudget}\n              saveRemaining={saveRemaining}\n              updateQuestion={updateQuestion}\n              />\n            ) : (\n              <div className=\"row\">\n                <div className=\"one-half column\">\n                  <Form\n                    saveExpenditure={saveExpenditure}\n                    saveCreateExpenditure={saveCreateExpenditure}\n                  />\n                </div>\n                <div className=\"one-half column\">\n                  <List \n                    expenditures={expenditures}\n                  />\n                  <BudgetControl\n                    budget={budget}\n                    remaining={remaining}\n                  />\n\n                </div>\n              </div>\n            )}\n            \n            \n          </div>\n        </header>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}